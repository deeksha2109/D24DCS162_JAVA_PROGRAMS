public class p33 {

    private static long totalSum = 0;


    static class SumTask extends Thread {
        private final int start, end;

        public SumTask(int start, int end) {
            this.start = start;
            this.end = end;
        }

        @Override
        public void run() {
            long sum = 0;
            for (int i = start; i <= end; i++) {
                sum += i;
            }


            synchronized (p33.class) {
                totalSum += sum;
            }
        }
    }

    public static void main(String[] args) {

        if (args.length < 2) {
            System.out.println("Usage: java p33 <N> <number_of_threads>");
            return;
        }

        int N = Integer.parseInt(args[0]);  // Total number to sum up to
        int numThreads = Integer.parseInt(args[1]);  // Number of threads

        if (numThreads <= 0) {
            System.out.println("Number of threads must be positive.");
            return;
        }


        Thread[] threads = new Thread[numThreads];


        int chunkSize = N / numThreads;
        int remainder = N % numThreads;

        int start = 1;
        for (int i = 0; i < numThreads; i++) {
            int end = start + chunkSize - 1;
            if (i == numThreads - 1) {
                end += remainder;
            }

            threads[i] = new SumTask(start, end);
            threads[i].start();
            start = end + 1;
        }

        for (int i = 0; i < numThreads; i++) {
            try {
                threads[i].join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("The sum of numbers from 1 to " + N + " is: " + totalSum);
    }
}
